#!/bin/bash

raw_coercions=$(tempfile -s .out | sed s/\.out$//)
raw_canonicals=$(tempfile -s .out | sed s/\.out$//)
parsed_coercions=$(tempfile)
parsed_canonicals=$(tempfile)

coqtop -w none -R mathcomp mathcomp >/dev/null 2>&1 <<EOT
Set Printing Width 4611686018427387903.
Require Import all.all.
Redirect "$raw_coercions" Print Graph.
Redirect "$raw_canonicals" Print Canonical Projections.
EOT

cat $raw_coercions.out \
| sed -n 's/^\[\([^]]*\)\] : \([a-zA-Z_\.]*\)\.type >-> \([a-zA-Z_\.]*\)\.type$/\2 \3 \1/p' > $parsed_coercions

cat $raw_canonicals.out \
| sed -n 's/^\([a-zA-Z_\.]*\)\.sort <- \([a-zA-Z_\.]*\)\.sort ( \([a-zA-Z_\.]*\)\.\([a-zA-Z_]*\) )$/\1 \2 \3 \4/p' \
| while read -r from_module to_module proj_module projection; do
  if [[ $from_module = $proj_module ]] || [[ $to_module = $proj_module ]]; then
    echo $from_module $to_module $proj_module $projection
  fi
done > $parsed_canonicals

echo "digraph structures {"

cat $parsed_coercions | while read -r from_module to_module coercion; do

  grep "^$from_module " $parsed_coercions | ( while read -r _ middle_module _; do
    if grep -q "^$middle_module $to_module " $parsed_coercions; then
      exit 1
    fi
  done )
  if [[ "$?" = "0" ]]; then
    echo "\"$to_module\" -> \"$from_module\"[color=red];"
  fi

done

cat $parsed_canonicals | while read -r from_module to_module proj_module projection; do

  grep "^$from_module " $parsed_canonicals | ( while read -r _ middle_module _ _; do
    if grep -q "^$middle_module $to_module " $parsed_canonicals; then
      exit 1
    fi
  done )
  if [[ "$?" = "0" ]]; then
    echo "\"$to_module\" -> \"$from_module\"[color=blue];"
  fi

done

echo "}"

rm $raw_coercions.out $raw_canonicals.out $parsed_coercions $parsed_canonicals
